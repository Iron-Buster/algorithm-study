package com.fqh.单调栈;

import java.util.ArrayDeque;

/**
 * @author ikun
 * @version v1.0.0
 * @since 2024/1/19 18:10
 **/
public class LC_1950 {

//    1950. 所有子数组最小值中的最大值
//            中等
//    相关标签
//            相关企业
//    提示
//    给你一个长度为 n 的整数数组 nums ，你需要处理 n 个查询。
//
//    对于第 i （0 <= i < n）个查询：
//
//    你需要先找出 nums 的所有长度为 i + 1 的子数组中的 最小值 。
//    在这些最小值中找出 最大值 作为答案。
//    返回一个 下标从 0 开始 的长度为 n 的整数数组 ans ，ans[i] 代表第 i 个查询的答案。
//
//
//
//    示例 1：
//
//    输入: nums = [0,1,2,4]
//    输出: [4,2,1,0]
//    解释:
//    i = 0:
//            - 大小为 1 的子数组为 [0], [1], [2], [4]
//            - 有最大的最小值的子数组是 [4], 它的最小值是 4
//    i = 1:
//            - 大小为 2 的子数组为 [0,1], [1,2], [2,4]
//            - 有最大的最小值的子数组是 [2,4], 它的最小值是 2
//    i = 2:
//            - 大小为 3 的子数组为 [0,1,2], [1,2,4]
//            - 有最大的最小值的子数组是 [1,2,4], 它的最小值是 1
//    i = 3:
//            - 大小为 4 的子数组为 [0,1,2,4]
//            - 有最大的最小值的子数组是 [0,1,2,4], 它的最小值是 0
//    示例 2：
//
//    输入: nums = [10,20,50,10]
//    输出: [50,20,10,10]
//    解释:
//    i = 0:
//            - 大小为 1 的子数组为 [10], [20], [50], [10]
//            - 有最大的最小值的子数组是 [50], 它的最小值是 50
//    i = 1:
//            - 大小为 2 的子数组为 [10,20], [20,50], [50,10]
//            - 有最大的最小值的子数组是 [20,50], 它的最小值是 20
//    i = 2:
//            - 大小为 3 的子数组为 [10,20,50], [20,50,10]
//            - 有最大的最小值的子数组是 [10,20,50], 它的最小值是 10
//    i = 3:
//            - 大小为 4 的子数组为 [10,20,50,10]
//            - 有最大的最小值的子数组是 [10,20,50,10], 它的最小值是 10


    // 通过单调栈求出每个元素作为最小值能够到达的最远下标.
    // TODO 还有用dp，有点难
    public int[] findMaximums(int[] nums) {
        int n = nums.length;
        int[] left = new int[n+1];
        int[] right = new int[n+1];
        var stk = new ArrayDeque<Integer>();
        stk.push(-1);
        for (int i = 0; i < n; i++) {
            while (!stk.isEmpty() && nums[stk.peek()] > nums[i]) {
                stk.pop();
            }
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int l = left[i];
            int r = right[i];

        }
        return nums;
    }
}
