# 1864. 构成交替字符串需要的最小交换次数
# 第 241 场周赛
# Q2
# 1601
# 相关标签
# 相关企业
# 提示
# 给你一个二进制字符串 s ，现需要将其转化为一个 交替字符串 。请你计算并返回转化所需的 最小 字符交换次数，如果无法完成转化，返回 -1 。

# 交替字符串 是指：相邻字符之间不存在相等情况的字符串。例如，字符串 "010" 和 "1010" 属于交替字符串，但 "0100" 不是。

# 任意两个字符都可以进行交换，不必相邻 。

'''
    输入: s = "111000"
    输出: 1
    解释：交换位置 1 和 4: "111000" -> "101010" ，字符串变为交替字符串。
'''


class Solution:
    '''
        交替字符串只有两种情况  
        奇数位置是1 偶数位置是0 
        奇数位置是0 偶数位置是1
        case1: 01010101...01
        case2: 10101010...10
    '''
    def minSwaps(self, s: str) -> int:
        cnt1 = s.count('1')
        cnt0 = s.count('0')
        if abs(cnt1 - cnt0) > 1: return -1 # 无法完成转换的情况
        n = len(s)
        a = 0   # 奇数位是1的数量
        b = 0   # 奇数位是0的数量
        for i in range(n):
            if not i & 1: continue
            if s[i] == '1': a += 1
            else: b += 1
        if cnt1 > cnt0: return a # 1的数量比0多 只能组成1开头的字符串1010...10 需要把奇数位的1交换
        if cnt1 < cnt0: return b # 0的数量比1多 只能组成0开头的字符串0101...01 需要把奇数位的0交换
        return min(a, b)




